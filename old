#include <iostream>
#include <iomanip>

#include <boost/graph/undirected_graph.hpp>
#include <boost/graph/exterior_property.hpp>
#include <boost/graph/floyd_warshall_shortest.hpp>
#include <boost/graph/dijkstra_shortest_paths.hpp>
#include <boost/graph/closeness_centrality.hpp>
#include <boost/graph/property_maps/constant_property_map.hpp>
#include <boost/graph/graphml.hpp>
#include <boost/graph/graphviz.hpp>


using namespace std;
using namespace boost;


typedef float Weight;
typedef boost::property<boost::edge_weight_t, Weight> WeightProperty;
typedef boost::property<boost::vertex_name_t, std::string> NameProperty;

typedef boost::adjacency_list < boost::listS, boost::vecS, boost::undirectedS, NameProperty, WeightProperty > Graph;

typedef boost::graph_traits < Graph >::vertex_descriptor Vertex;
typedef boost::graph_traits < Graph >::edge_descriptor Edge;

typedef constant_property_map<Edge, int> WeightMap;
typedef boost::property_map < Graph, boost::vertex_index_t >::type IndexMap;
typedef boost::property_map < Graph, boost::vertex_name_t >::type NameMap;

typedef boost::iterator_property_map < Vertex*, IndexMap, Vertex, Vertex& > PredecessorMap;
typedef boost::iterator_property_map < Weight*, IndexMap, Weight, Weight& > DistanceMap;

typedef exterior_vertex_property<Graph, int> DistanceProperty;
typedef DistanceProperty::matrix_type DistanceMatrix;
typedef DistanceProperty::matrix_map_type DistanceMatrixMap;

typedef boost::exterior_vertex_property<Graph, float> ClosenessProperty;
typedef ClosenessProperty::container_type ClosenessContainer;
typedef ClosenessProperty::map_type ClosenessMap;

void WriteGraph(const Graph& g, const std::string& filename);

int main(int argc, char *argv[])
{
    Graph g;
    dynamic_properties dp;

    std::ifstream inFile;
    inFile.open("../graph/graph.xml", std::ifstream::in);
    read_graphml(inFile, g, dp);
    cout<<"Vertices/edges: " << num_vertices(g) << " / " << num_edges(g) << endl;

    // dijkstra
    std::vector<Vertex> predecessors(boost::num_vertices(g)); // To store parents
    std::vector<Weight> distances(boost::num_vertices(g)); // To store distances
    IndexMap indexMap = boost::get(boost::vertex_index, g);
    DistanceMap distanceMap(&distances[0], indexMap);
    PredecessorMap predecessorMap(&predecessors[0], indexMap);

    // fw
    DistanceMatrix distances_fw(num_vertices(g));
    DistanceMatrixMap dm(distances_fw, g);
    WeightMap wm(1);

    floyd_warshall_all_pairs_shortest_paths(g, dm, weight_map(wm));


    /*
    DistanceMatrix distances(num_vertices(g));
    DistanceMatrixMap dm(distances, g);

    WeightMap wm(1);

    floyd_warshall_all_pairs_shortest_paths(g, dm, weight_map(wm));

    //vertex_index_map(get(0, g));
    Vertex v = vertex(0, g);


    /*
    for(int i = 0; i < num_vertices(g); ++i){
    	for(int j = 0; j < num_vertices(g); ++j){
    		cout << "Distance: " << i << ", " << j << ": " << distances[i][j] << endl;
    	}
    }


    // all distances 1?
    graph_traits<Graph>::edge_iterator ei, eend;
    for(tie(ei, eend) = edges(g); ei != eend; ++ei){
    	cout << get(wm,*ei) << endl;
    }

    */


    ClosenessContainer cents(num_vertices(g));
    ClosenessMap cm(cents, g);
    all_closeness_centralities(g, dm, cm);

    // Print the closeness centrality of each vertex.
    graph_traits<Graph>::vertex_iterator i, end;
    for(tie(i, end) = vertices(g); i != end; ++i) {
        //cout << setw(12) << setiosflags(ios::left) << g[*i].name << get(cm, *i) << endl;
    	cout<< get (cm, *i) << "  " << endl;
    }
    // construct the tree from node with highest


    for(std::vector<Weight>::iterator it = distances.begin(); it != distances.end(); ++it) {
    	*it = 1;
    }

    Vertex v = vertex(0, g);
    boost::dijkstra_shortest_paths(g, v, boost::distance_map(distanceMap).predecessor_map(predecessorMap));

    BGL_FORALL_VERTICES(v, g, Graph)
    {
      std::cout << "distance: " << distanceMap[v] << ", ";
      //std::cout << "predecessor: " << nameMap[predecessorMap[v]] << std::endl;
    }

    //
    WriteGraph(g, "after.dot");
    return 0;
}

void WriteGraph(const Graph& g, const std::string& filename)
{
  std::ofstream graphStream;
  graphStream.open(filename.c_str());
  boost::write_graphviz(graphStream, g );
  graphStream.close();
}

